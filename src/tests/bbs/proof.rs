use super::{
    create_generators_helper,
    test_data::proof::{
        test_data_from_octets_invalid_parameters,
        test_data_proof_gen_invalid_parameters,
        test_data_proof_gen_verify_valid_cases,
        test_data_proof_uniqueness,
        test_data_proof_verify_invalid_parameters,
        test_data_verify_tampered_parameters,
        test_data_verify_tampered_proof,
    },
    EXPECTED_SIGNATURES,
    TEST_HEADER,
    TEST_KEY_GEN_IKM,
    TEST_KEY_INFOS,
};
use crate::{
    bbs::{
        ciphersuites::{
            bls12_381::{get_proof_size, PublicKey, SecretKey},
            bls12_381_shake_256::Bls12381Shake256CipherSuiteParameter,
        },
        core::{
            generator::Generators,
            proof::Proof,
            signature::Signature,
            types::{Challenge, FiatShamirProof, Message, ProofMessage},
        },
    },
    curves::bls12_381::{G1Projective, Scalar},
    tests::{
        bbs::{
            get_random_test_key_pair,
            get_random_test_messages,
            get_test_messages,
            TEST_PRESENTATION_HEADER_1,
        },
        mock_rng::MockRng,
    },
    Error,
};
use core::convert::TryFrom;
use ff::Field;
use group::{Curve, Group};
use rand::{prelude::SliceRandom, thread_rng};
use rand_core::OsRng;
use std::collections::{BTreeMap, BTreeSet};

pub(crate) mod test_helper {
    use crate::bbs::{
        ciphersuites::bls12_381_shake_256::Bls12381Shake256CipherSuiteParameter,
        core::types::{Message, ProofMessage},
    };

    use super::*;
    use rand::{CryptoRng, RngCore};

    pub(super) fn to_proof_revealed_messages(
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
    ) -> (Vec<ProofMessage>, BTreeMap<usize, Message>) {
        if revealed_indices.len() > messages.len() {
            panic!("more revealed indices than messages");
        }
        for i in revealed_indices {
            if *i >= messages.len() {
                panic!("index greater than total number of messages");
            }
        }

        let mut proof_messages: Vec<ProofMessage> = Vec::new();
        let mut revealed_messages: BTreeMap<usize, Message> = BTreeMap::new();

        for (i, &m) in messages.iter().enumerate() {
            if revealed_indices.contains(&i) {
                proof_messages.push(ProofMessage::Revealed(m));
                revealed_messages.insert(i, m);
            } else {
                proof_messages.push(ProofMessage::Hidden(m));
            }
        }
        (proof_messages, revealed_messages)
    }

    pub(crate) fn proof_gen<T, R>(
        pk: &PublicKey,
        signature: &Signature,
        header: Option<T>,
        ph: Option<T>,
        generators: &Generators,
        messages: &Vec<Message>,
        revealed_indices: &BTreeSet<usize>,
        mut rng: R,
        failure_debug_message: &str,
    ) -> (Proof, BTreeMap<usize, Message>)
    where
        T: AsRef<[u8]> + Copy,
        R: RngCore + CryptoRng,
    {
        let (proof_messages, revealed_messages) =
            to_proof_revealed_messages(messages, revealed_indices);

        let proof =
            Proof::new_with_rng::<_, _, Bls12381Shake256CipherSuiteParameter>(
                pk,
                signature,
                header,
                ph,
                &generators,
                proof_messages.as_slice(),
                &mut rng,
            )
            .expect(&format!(
                "proof generation failed - {failure_debug_message}"
            ));

        (proof, revealed_messages)
    }
}

#[test]
fn debug_display() {
    let mut proof = Proof::default();
    proof.m_hat_list = vec![
        FiatShamirProof(Scalar::zero()),
        FiatShamirProof(Scalar::one()),
    ];

    assert_eq!(format!("{:?}", proof), "Proof { A_prime: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, A_bar: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, D: G1Projective { x: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), y: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), z: Fp(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) }, c: Challenge(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), e_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r2_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), r3_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), s_hat: FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), m_hat_list: [FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000000)), FiatShamirProof(Scalar(0x0000000000000000000000000000000000000000000000000000000000000001))] }");
    assert_eq!(format!("{}", proof), "Proof(A': 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, A_bar: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, D: 0xc00x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x000x00, c: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), e^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r2^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), r3^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), s^: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_i: [m^_1: Scalar(0x0000000000000000000000000000000000000000000000000000000000000000), m^_2: Scalar(0x0000000000000000000000000000000000000000000000000000000000000001), ])");
}

#[test]
fn default_value_deserialization() {
    let p = Proof::default();
    let bytes = p.to_octets();
    let _ = Proof::from_octets(&bytes)
        .expect_err("default value deserialization should fail");
}

#[test]
fn gen_verify_serde_nominal() {
    const NUM_MESSAGES: usize = 5;
    let messages = get_random_test_messages(NUM_MESSAGES);
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let generators = create_generators_helper(messages.len());
    let first_and_last_indices_revealed =
        &[0, NUM_MESSAGES - 1].iter().cloned().collect();

    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            &messages,
        )
        .expect("signing failed");
    assert_eq!(
        signature
            .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                &generators,
                &messages
            )
            .expect("verification failed"),
        true
    );

    let (proof, revealed_messages) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        first_and_last_indices_revealed,
        &mut OsRng,
        "proof gen failed",
    );
    assert_eq!(
        proof
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("proof verification failed"),
        true
    );

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets)
        .expect("roundtrip proof deserialization failed");
    assert_eq!(
        proof, proof_deserialized,
        "proof from roundtrip deserialization doesn't match to original proof"
    );

    assert_eq!(
        proof_deserialized
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect("roundtrip deserialized proof verification failed"),
        true
    );
}

#[test]
fn proof_size() {
    assert_eq!(304, get_proof_size(0));
    assert_eq!(336, get_proof_size(1));
    assert_eq!(368, get_proof_size(2));
    assert_eq!(400, get_proof_size(3));
}

#[test]
fn gen_verify_different_key_pairs() {
    use rand::SeedableRng;
    let mut rng = MockRng::from_seed([1u8; 16]);

    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_test_messages();
    let generators = create_generators_helper(messages.len());

    let expected_proofs = [
        ["b9bb1a777882a0c426f00e2e47bfab1d0e7f3490bd240c2376c6a619fe2228baae60fd640e8fde387e3a4e1b8a206aef8cd33cfa203a5dc2e85bfec71b68b2b7a6a6ee84ffdf312cb0be47fac145b3227f3cc160ebdc34ca0b192fae0ccf6ff2967abc18bc1c1341e2e7d3ded35c5be9ff033f095314a08d3b3920e08b728a76c9fe83ae4b48e8a75bac0f71c9d09d2b6c892bc86d042432abce3110e3e4de17f20eac238ad2e93c738b48e468073e2450d19b686e0ddba7ea8b6442a4c5a6675311e860e6f742935b6fc85ab875036c10ba87bfc6b4ba3dded41510a4678a5aec69ee4d010b765d82e9c44ae83a7cfd1603349100230dd26a6e33b8db68c4bacad9f8cc91b0d85e95d6bf305a77809f6eec21b06498dada267587321eaf7103f721658a1c42fb262b3fed0b8b9173230e5e2417a590a0390e6f199bf297cbc7ccc9c90bd631f552ca0f30aad9172cee115f6335a24dcf517f573f1e7e764aecb6c6eb5d3b1fb05e64f2019255f03d9a4c87a72ad664b4795acd7f4aafd07c5303fbdf0690030afcfd480915340c0b7851fe75c333a1d0eaeadf91e194b61ade05db5a80a347260407700c009f5420010b58863f0c35716d3b86347882fac9ae559b93da358f8c2807151539b5b3d91d3524252b05b1f7d496754fb4432945757c89f24a460a838db1591377617f0e25", "a60ad5e144c7f390e49fd3744fbd114c7c4bc70bbe28a9454927c5db03ba5a4f6cfff12f61809181cffd96eff23178f098e6ba48108b9667908995508e1b756b549df76fb0a5c5d10307601c5d232b7848cb69139dc5d780dcba3b641499d90289136a78f0c022889c7fd290abba335bcb9ce15dd7362b42032b47d1c261fe7b094925b99dfe808a8e2f9d2947af48d139f07281801fb3e8383e1877382906fcd8de1134b66a50340bfededa49685a202d4e8d0bfb31f9881ff543332e9fc0044f6a283a9351ddc5c5ea7178e0227a073636312b53c4139be4511b663f0f7b9ec4a46187ed12f30dbe8ea73c7ab23b5b319a284e92fc82c44a23b92067c09ae42dd2ce6cf8ad695576b87585ef127e7d0bb92f27a1c42d869d1c520a83548ec9677d53365c6794e923a1eeee5ff0a81e584fe230efc470b793564f6ff0b564d541906012fa035b2e590234d0854e27a527bd9b9323c2967b507b3c56491dec5d12256dab9d98fe9bb3cd530b22191e601079ccbfe1097ac73a8e26e8ec637cd4a389ee70ae066ce6e7d46ac4ff6577443b8b5f0fec1148fac0c3d46369c5a0972a4b19b8f76de88656eb7f531363c5a838f627edccf023edd1ec4f502793ec3d179f0126ec21ef1687bafa4982e3ba82", "a0bb0da4d3e8071c54b872d4987f46e3bb8439cc1293e7f07e7602b9a712dd582f4fad5746b4c9c49f9a36347be08a5ca9f72556411a6667b73e9253f7eaa615525a1647c282f04ff2848b2959aeae471f221c0e1b9ff8f7c8590ef75a802fe1a29313e0fa5863bb25d356b3cf30e06d3aa05ee460da9b4dd4ad1a2b6b27eb6bc10dc71ad9190cb86f88f6f6bce443e50ed7866265910306e64c60a4750f9f902c2876247c58ad51f070bad0afc9381c58a996cd8dc4e487b5fdec76dd1d40109b511c402c81d0e75734ed42467d877206f36f5da0b01c8fa5e76abf64c3104b5c65f44e8ad64873d43d136443c35d221480ea2ca6b962b7f1ba8aed13b56e2050b09c1015467ab1fe2a50649b70d45e345a87202760cfef2fd9f61b8b05a71a33d46fb0c739b3ef3d3d129caceec77f3b61829be0eabbb6abce4d4a63bb5117404955c2f60f9f7f3cf30891a8111fa241f5daa57f129baf2b10cccaff214c359eb3ac2cf343a79b64b5cbb4aa1851c4236b61f50ffc7462cf468e86df8085c453162c70484bc93cc920aa05359689c21103a96fac8eae25024602887b33c187f2c69e186ae36fbed8d53fe99ab42a0b", "856c316c3ad2613243c347a7a287112be1cb2e56e6397abc43cdecf0690232ad3e266010d0e886ae9287cbfe7c7f7d55b767c3e9ef2552678c451f70ae0ea5be0475fb717841e324ff94b102d599e32514ff7eb78e31724f574fef2cb88eb33396a833de66cffde7c9101c33e5b7b8b3d0b7fb9e3cdbbb37a8ff5ce0bc51894d2d709a5ac441511ef1db42c30a89990b143900335f6aa81791077a21b257612942920610f77440ffdfa94d7f67957c2f3253dab2a7b2669c98bba84b956455675eeddaea768709f929a9b96936881a411d1c9b2f07c4512fd3bf01342881d96e00fc197676c0651a73325e20a5ad6b195e16f730802cc3d8c0fce4a54a439bccf9c03c848a62f751e21fa4c0b6c1337b30ce2c3f0316645121262cd4ffab4834fbb8fffd42fc2b0bbb64d28159087954240445f78240dc706bf5e03e73bab9c6ab2afdb0c3d98be1ecf0e988e62d4ee94919e3c37d2a1503dcde0b05d0a515a8750c92f95a1026c9e177cac29b2f43cf561f43529eefb7aee7e202b7fd0a6f5be76574748a072fb3cdb62a0708443fa9", "a442bbf108e4f8b1f9ab0217343cc3c395e4b353330efb402eee18ea02d40d848356a0c2618d6d08e514ac5fd94d7c4d80a23777d3ad45edecc1ae7548d4d0ec17172e1eb7154e011351738baaa85ca2aae127b0d7de8fb1de659348d76f8086ab25d74d0e06cb339f030793e6d074468881ddda88d1ff19113b6c9c6daaeae775d2f85f446920b002a8f67187682262345e376e40245edc0c8a479ba35bcece42d5acb031ad9626042d644e59c413e95c5268d9560b21b4e9ebf9b102928ffef9f44e98b86f4174da0b4db34c2886ee3664a57c1f3eb65d8892dff7ffcaa2f855b10760f0ee4b355c03c45f7a4bf33719bce754cc50293539fe4bd804cedf26f80edf5cbbaefc4ab767f1f8682fdb0955739c05ac4aaecf47cb74597b39899ffd9a5d0eeabd0213b9e49fdb8ba6730832225fdce4f9a40b779af3c0c945f769bc9c7090f4ce1a5ef0b67b75dc419bdb4ef341489ba786e74bc2f788414729b1b42e77e38c8dd5af55f956f728d9faad", "811b63a59e32146a0f4342ff5cab99f49c1626f1d66c4844ee93b4fe8f80c9567c62cbc13130696950a47952c8dc8a59b7e5047e2849ce603f36119f2d3b9053acaf9695beb8d391cf5c9fea1860bb38e481f91c60b41dfa1374494db3f3109091249edb3a70cec2e10e18a26a7581681eae22c769e682bcceca38ef9aa3b20bdbdd2a58d3093b126c341ce8d26af3624458c6bae463fdc9c1ee733402a242fb34d004023244b16fa1e0f81760a4817a0350b30d6f08bcad66a35964b32edc6cb7dc682be94d25119593e4e3232a710572ff95a2cc225c3aaff19224b5f2521b5b3b133fc587267cc8dd0df65fb550885a516fffa74b852bb3bcdce7a4c6504998e5ebe7706decd5b51f6d389c31edbe67fcf6a4be3b8bd175505f0fd18a0383201857b4aa065ff16b1d8512a82fcb7b617d2368010aab97bc6811f9be5ca45fe1b70d602f64a8f015e12eb6522820fb"],
        ["97b81cde5a185760605b1cf0673c3e4ee980a6e32b859abf1a6073a4377d10361be79b70a27b04d32b984a3379a15126ac0ee81d83d4560f7028fb882d6f4f5101be101bfc46d3527f44fc53142bee4fe72aba079ba712f328de3b600a2aa968a1a68b520a76726cb676a181265099ad42377008889f7d909eb548c68d040c7b49ded5192989bc19ec495f0f88624a466175d9bab2eda52f3d98cc6ae713432ead9e617a3907bc40b158cf753e1f32f64a1ef197fb988e002ae54c398f67f39a6a56e73a01a6cb997d9f31f1c6f94345033de0d1346758774736f76fe15eaab3d64198e13167aa4a351526327027a9032c36183ff1bbb475fe2d714c698ee8a27974fdf2b23921017e58ad1b0ce9923d2343e9c8cefc89785c8586259965e5a7041ab448522fb76f52b1dd51a81f20fb54d8d18ed01fa057f8918f5095a02b7904df05fce1abf9bb807c67004048ebf72787c9d656a4f3a526e3017ea8b76c1c3dc1fb11172c0634578866fd03a8947c03c8d2c3994bb29a8ae683061ccc8b79d087955429917462c94881e7942ba7605b409a49ee019b7d9811c61b16ccbb43dc5dc439bdc330f16e726fe4c8e5cd3e6f4ad600668dad73707141b52554d992e276205b4258dc8efd68e188519d655725f25861cef442efee29e117fe59ac1455a05ac6b7947b4ce89b0de5135b35d9", "b4aeb7742be89425fe2128b712ecb6a409e006f096c964699222c58735945940680ad198084782bde9efcca48c8c7608aa5b3f556aa9246ff60fbbb6f1cddf5856cb46e8803de78cf8ce0b2e5b563c0de520b64d1fb93c842fe835ada3ddeb6996cb3bf927b5d93d5f97b564d1a1284bff46008a9b79e679a1bfae1a8708faf38810c0c5c47752d97c85d199e028c0b73bbfa570ceb99b2e74fba4c7a68d63cd915e79841fbfdb5c3c36adcad5ae73b31d1cd5a8d3fd751fe7c10c4b00d27e2ef91a816c0d2663f2942ac4d3a3e6461c1f9eec0055e0e5625c695b065aaf162c4c664e2863fb49de9c9635cf1390ab6d2268b7110afc4cdc4d3c3c8a22e423cfe43dd4aa73b01f8a47f05d93ef10eb1c0c4d634d3d74c2280ccae640872c0735f8bbdaefa02b07fda6145ab2eace5b386f281f13be06c535e15c5a63c47609627c776787b9b005c6fe91a2c13ebccc3756f27017858c93fbadeb08b49154dfd0fb899dbdb438b7aec08d66cb505e9df70cc72dda7409b90e1e711edaa206c1422364159ab724bede098cbae3d3846cbb4e53ab9f13a2660ca080e81e4058e4271e5e2d1c68b3fc585369af87f162769f70f93a98d22949961e4167070a4e3c272e92ed4de820653e8a88bf67173a4677", "8177d6d8a49ab99ac284b173ddb812c4e9f49f05e9a060e83f3384a1c759472324e17baa7a92917e264bc3cdb9c97afeac3b0b774d0295affcaef16d634d7648ff2cf29ce3291415ee1c429fab8a2ee41db8d9fb1a4cf77ce40f76ad82ba2d18831deb82a2238e2e6dd6c43fb55a027426d034d18fa91a728b59c4f314aeda9313735d890bd7c679517aab622e1213a25f4f368eb15f00f2aa0838b724d4c7a6c3898475e8630e25adf395acaf05bb213ededbe5cfcdc5c39d72894664aae992d8ee38d278fcd182ef7d936d1e2805ac5a5873c538e6b21d382725f0eddb190c2a3f26b667d25c3254745c0af92f8db006bca67093df4af28c53829897f874f65b2df10b6bfc48a3bc2b5c14aec94b2c35b6c24eb3e8dcf92ea78960e5acbd335edf580471fffb715c69334fca96ca163b4c947e41f453c0731873718e65a9b80a0ad35d2b091bb24de33bffa37128a73878f4dedac9001045ed0cc26ac359005665af910d718c83348609b8b61f91300ccbc5f2d44e2ee3f3e75ccee659647edfc0dcafd49bd335c97b4c4134ec00df2d4efaca49ea066beeaa360f8c89b2ac6dddf1299f596bb4d579e8538aee3a1e", "8fa2d9de39dce2500dee34e2546892bf889175e9e2fb3a065cd38f8dc747e72fb16f9fc2ed9918d9ba9cdb8666dc3351b433c61f1010c9419526d45f271aac2df8d3f4824d2f33603eb9310a0f54a83e3af6ff1eb954e2e4550104168a57d9138135a0f994592af22e8126f890f3fee0f03725a29a2303390190fb40d2ddae411a6c69e89a62b368e79ce213d49886dd4c4bf4cdbba6400658fb983272b9cb5f0c4b35a1071bae33761f65ebeedff297631f3189af9ef3551e5b3698c32a35d0f60c3d40b61ad3e84b06e55ea11628ff022dfa0dfca649a3f4280e3b867b2f8a93eee0cea6d3f1920deed01ac2ea6c04553a0d27686117b727755696fb07bf3d78e44eb2251bf917b79caba0effe54fa4d2f9b37cec8b47db873070fcc1323fc4af542ab231479d1fb301714a345b916625c5d099ba4c19ab766d740fd638188e726edfb488f06e689f2ea5019349e97317111c62bed60cd349f1b0f48d9de41fa007e4f95aec5fe4292d72b5f36e31e0c5ecbddebc410377f6956f9deab171ae7f7fdd27175870ce97e371afb47b3f1", "b9e7d79132e6b95c364bf3c28444ca16449333d50b6b291fafd27bef300b72e5a3e88422896e0649b08300fa1c80c133b44976c220e3b6e2c73a54dd825bc084c9d8ec3aca3cc5fec87857ba138d0c3bf095651ed64c9b4d2d413d611e04ddc3b0421b3ec871cada2caad68c27cba6e24f910b46d6394c358cd3d693aa0d3cd283759a080577d764ebce5142fb67fb0c2528a230d8744b60286040a63ed592d8483d6188894b4a4bed9b7c38bd33e9d30501b8bcf897640ae53714c2d56a6544fc8af89d2c13b0cf60135000d73db1861b8009632ed85839c2ec604adfb0513843f133ddb2424e9db0eee5336de0c11425354a9044263aa7017ec745947ecf173676f62ab42838dc3324cc2c5bc8aa0806e4f15d9ce8781e549470d334c50884d7b31e38ea023c90d6c0d862fe759d5223c8eabd314ee6a62057c0a508e68e50c34eb9f8fa7e0f24179093e22ccf792b217199b93d0418d6978ac2440e1fccea75e68953e668828c70637bece693ce50", "a51e4f20db2481d1a12da7c947d67f16c40c462032501dc6fe23f198d0ae6c0f6f9085218fc437835ed456278342a6caab6d0202e4d6db544e11f864dbdc84aa1981b00c5041058a5eeacff1ca1027a667135f8f9081f73d3714d760be18af749883fb437179b4319460f5ecf9e094632c9a8efe24dd46671ca0d4b3adab8bf6ca547a46702cd0390c3e2807dc458168126d9d330275fa61243afceeab4de24355304586911542c0c2a480b13a65de0408374677105d1c0d061ac69d75b0ab0045e9a84adecddb098fd7e011390e328900001c4789b9568457c1778b3b7b7741da1750fe9a854c69d7835cc07fd49b392f3d68a26904a9e853fa7f3f838ace08b01e27052cbd544c89044af6d63a61401742f625875cab22bf34100edb42489e6e1cdcea8f63e20b1a1117b5ef638a2d7078361ac46582177f7f796f19ba38893dc34de2aafcb5c145ff56a401ae2726"],
        ["9348677a4e6fad940f4d21a25d331812447e62efad8eebe32cda5bd08fca7266940d2d6e0c3785bac8904f2a4fe2dcada2be8d414611bc91ca233a7e30a6a6ef326dc013eb97558e1a1c6ab35033d89371a3b836d6df44311edc8250e7a199c0ab8a39243ee92acad00be1534d0e99b37770690acd7efba0e0f2bc8b8a6f66a14658311cc331905a5d9327082154db52633b35c60dbab8a53ea2e33ac028b1948875bf1edc0d68e3973b2eccbb44e60756c5ae2a385119ec1d0145ad49ce5eecb50fb05576546f1cda70c59c91827c7432eb2be96c0d6a8a634bb3c5fbf985ad1a3bb7bdae7b0e93eacf1ee01dacb1f903dde4c5d708cd7f4af507131e32f8496de32bc863f2f247f2964e560cbf8897424599cc57a60a1b22c9038bca78ae781478d04cb213de7a19e1f5ff399e705a1d141c95954bc61e0341840d03eebc7c1e812e4fa3607e758594cc1e42a0fe7e63f0f0c5cb371d035a6af3cf2f4902695c8d490460f1f498dc0a920e6a2cdbb03928749d3ecda448387999ffd41f54dcd44940a69320fdafed5b2f27ee8ff549642c5888c4347359bab696781111055cfeb6a4c0798f724a6b80f22d16cd1fc41a489051d101ebb40364b782b674548d67d2696161742d75aeb6ad8656459f3c1909fa18c45b00bf10fc91ddfdbbad78e52ef4d3d5e0a1975855cc368d188f6f", "b21f5db78ee3edc4306e3b9aaf5a0b3b8dcdc086ea4173c2bdf94c3c5cd2d7ea9961302d2d57fc12304b70c62792f6468e5e35fae3261b13e34284158981608d42cc4d273dce7ce35b7d6d0f6ac7ad856dcbd23a20f05f80071822f9d98099e69470ff04a305584b3a68afed06757e400acd8c03357ffd99b358d0eee0b840d2d377e10741e9ab3cb940574ff31e990b4b87c4ea8e21c091b794c838fba421be837b22e6245ebe669e627752b02d963f5755f2cd8c4a5f9a2cdc50dc0df12c9ce43aae02757075290bcf4ccfb1a283f113fbb0c060d6a16cdb3c4025f6bf9ded93e5330ecdd76fc659128afff6170a3229a544b98da64788e5babd3735f9a3bc07c3d65ecd1b3bcc592cbcb5cc30b04f47dd29f790eae0c6307878ca6ece5220f3b49b6f833c5783c483e769d77b82e76f92ccadc190f37ad06d9237a8186fe73c87f6ae91cfd5aa0856782877e0ed98453005c6ed61469daafef1692397d33d3e0e0f4e610b3633f0b6cbc9b3f47e490f9743a8ede9227c944d17aa33ac679f4648fc004def865421b06fa9983d7f962b22f686893063813de4df86daba022b82274950968f9df4266a3f9a5e2361f50fcf87a8fd9ebd3cb2041e13edf17181ad07995b221f1bb8a2cd2102428d86ef", "b9e680cd063894ca4ce1594e3dd3c6f59ba10f7c50e8bbc3a811ef4555fbb2ed5c2b8f3fc53eecb19356481bbb9a93ba84bf1b927e2806533f628304168ccf606fd08d5962e708ba468297196942322594b5adf6258ba12a0e5296e7609328608156c9c9e6fa0fdafab55da03327c9b15c4a71cc8eb94f1ba38bbf878b89ec998ff806bcaac787047318a6a82131e7633ca992de60dddc368ab93e22f29bf82bfe408846b11b82b3962a0bc6485f92f82b50fa32f254d7f7cc132df7fe2ba11027c3a2623c424efb071afde1656e63dd00c8c3eb445bc09dbccba070a438fee4fcf1096163aee207fec54650f1476b29440e1a82da20938a64b175179a538969c5ce407febb2aa74217ee128f1dc33b206d38dbbe81fd6319ee7ac1b6b3de303b27b3336e6b10459a28752de3e37bda54179072a5e24b1f257c41523777514e3bf0e49b10a94d3034d515ea654b699580e88eaee2cdaa06a3f0274d335e5bf1ff7dad650c96451e62c44b4423fca08852102ac23a96741da09d5cdbe4197f016793aeec8a79cc581ddca1a09b5deadb4148ea7272d764659d14710561445212751276de5e2bacaeaa64bff650e9ab640", "aa69d00a2a26cd1cd32805864f48d17d6928a0fe24b6a487266e1e39dca8e2f900e2fa6741b0dfdd1b37ddd27505f0b6a1d557e3d0563becd35be9d7cddefe53d989589a28273fa7fcf3df3a756183fe2a1e24867453fbe01ffc3dc95d01ba5693211540acb98b1996ce508baa30cc187ee291fab5490b91720b2ec3d466a1478c23994f7fb4812c970022f6cc30cbc605b54dbd64c8333baea7a0fb09c4066b94e83871fa247c20203802f834c365492556d3691d9cc3bc26bfa14ff6dd92333bc2707831e4482d2db9320e3e858d935902d9c733077569c60c6c6c1710c6df8c7377719761e515fa62b2955ed4f24f031dfbba4d980218b40dcfed9a93d183a4159ced4e80fb830551907bf841f6455129d34b7d1cad772e34188894a90214e8cb7087ae5a5ef40c10c11636cce1046721aec3a630fba20971bc39584c5549ea98261b0c0f87c5cbc0d9ea7a2c68d44fd9b418df06552a515ba169c2c1a92b7da27bdfaa6961acdb6856161b0ad0e807f95a9bd10f86d3ef0c28ad066c0cacec99ed052389dad039ddcc90d5c3a8a1", "b558fb7d56d455e27958bd7980759e7597741539c53fa29731ff0943634f51428352dd28899b9d7b126a9af19bcf99e0a70e140809718fb8cf34c3ac21eaa4f5dd1b43c5f23a4d6414f38dda69769b6b5f60f4b8f4da4a4b81a2fd00267cfaa293ebc27039cbd4e778b9c9f4ad2221e7ba04f9f70735a545c67e7b4a1a4c5f58cbf6bce9e0b0829223527bba58ad550b4bdee16b582ba4a7f02d40daf5b790e75b703d2bbb7ccdde89ac22dbc5825153235a945519d23318d76873498af17ef97ebb3e6a7e07fd9578bbab7b80730d9147b05590b662c441092f0597385297aef27d4d8c96947e89f1c99c12cb83288a31eaea46068b4251ddd9da06afa8a0a70005bd96fc113a42a2245fd9410a31ff013cc4523fa9b01c2c12199d735ff3a07123773dae9214249dd8ef1f3e7c22f124c2890ec572dce50a573d436ec637d7622d8b74ecb9b4e763013d299e32155e187681fc2f561514e367d73fc978c752f397e63e133ea3ae5ececcd3abbfc7ca", "908fd932415b31d0b08c26e1ea7b48e5e10fcf5fffc1df186d69d8090d20bd2581ed2f6c32cf458fc8d8346428b8ea5ba64153b7c0306a61671a8bd187a4997eb8205ea7452827e6ada21b70bdbb1fbeb5ae2b4560c2265f6903498a56a5133c8acfbb6da4c0fbb89ea849339951aaeda0b52ff9953eac94ff3224c4427e31c6da107c5be8b44588d3d28ce73424022b3edf4ce0b9fdcbb4582ae6a45691d01df24f69bbe440fbbaeda98002d7dab76e208eb1e7895a8d16011484780d3f33386fbd35db36eab5f988fd54d7cc27ada0145a172e100c9aaeed72d7eac4e1d45b98fd63efb96eee918b3a4bbc0aae7f144e5e704ab07ec9a2faf4e7d936c7260a42a912b8965c5509562670dc9dd156845bbfbd2a000daf89f97d0641294e97baeaf570bd55b81346e6f11bea054df21a453b00ae46218dbc6da2d85c8c97d2295bd4729c48d3c8df822044d846950aab"],
        ["a125e73bcf38ae2d9e6277ad47651bc9aac35858d22ee07b200a0450fb9c4d31195a8090f436af3aa38cdfeda83686e4892c9b71c30541e9207a38945ec3b6179c7d46a3af2436d1483e1844c1621757d050e54dcaa6f09cf894de65bdcdca048d3f7ae15f5a443c012a515ab54d37ed7f3eb8df15dbaa3145dfe61023be11223c8178e2a814823c3aeee1e5704ca3ed20b816deca1102ac4d34287035c9e435aa81e8a11703cbb9d58fe89951fd688f47560785801f7747105589f12b7584cc9785f0e12976ca1d50473e3398caff191546e8f79e8813796dd2709a83fce38d71cb02542a6a79251a4a290d88f508a163722534b20b1471222127a03dd09baf5cef1c796ef87b6cce2725346775216409319daa2cee318718f5dcbf5516f57467387b0c9d863cae1ce8d4a8bb758ca02090564f5de227fe1ee40ad88749b11c9c4bd7ae3be069e794326a8c993bfc636ea181218cc2c5041e125ef790bb805eac6b3d348e6074dd3925135d8b6295b42a68674b108ad807d2c37257c509e00eefd19d8c909ed8ccf2ddcfbc334f2ca559df318605cc7c2132da4e1428d9e9340bd692ccd1854a64a676bf07685f530c29fcaab8abc0626b0d9800b948a6cac919cdedf685630918a951f26e3fcc373a1ccaf3ad9e21ea0068a1b6b35758c0cf8bf3f61430c786117e87e63461f80fa5", "8ec7ba24360b8c889ce3f7647734932dad473671e2535032827bc2985e04d371912a0f6d74dd519c7f0bd1b15315afae995d4a657e6edd5b70898d69d90b5b98069af947febbc4794b74e2fcdbfe36b5fbbd64216619f1ddb71aa0639a5a5ae7886c05917464185a251a02f516165e38f53588460710326b6a6e607907b139af54a4679d55be79e655d2bb2cfbe2f1473628b71f5ea1e8733c9b1ef81a9c6a0296406add88344ed40a17d7fe61cbe29e5a617e30d5fe3a601379cd23ac8330d46a8a18b80131852a564c7b622b2ca9b71f736c01db8ac09ced09062bc5da4f9a70cebc62139d5f8e17dcecd4f2ee0ed40ec0c36af91a63088e156d267aed2a359d39b46f3f1476da18c743079f4ee4d71b46bbce300e52438254c37867003391530ede5f77d18135a6dcf83a72d806111cff09901db3986fcbb699e79a4bfb3270262ce3c5767c0dbf05e25c086f06ea696b04e09739a36c02aa7fe06c8345e832a8982f7685fcceb54cf3261289effa1edf7fe3f9f6cc3dd8cb375f4743ffb8a6878a793ceea58764fe2b7544ab09c36fb953b2d7652b17f0aa5b3f3a84922df0c466ccd66b653a315263d37f17085d438e21f052f87fc560e5122af08cc566a8b76ae0a126ea296629c8f572ed25c8", "92c6b9eb511ae7dd90be76bac7ff242a7f19ecdf462f4b2e5e06b2662f92f58208ba1161815363b0e756c1b6cceff249a84aba1fbf15f57b44653dcb77e07902a5dcf0984c4a1e0a8695a3d343e84ccfdc03c65171b2c983a84993729488d5a184a5ee4c20aeb7e314e05d348050c11ed57b426e08cb9abba96ae9aee1aece25e27b13e60901a4c46ffbbd69839691e9445cfd18f43346b0b7ff9077568e9361c11b0721157cd2eb164a55003d499a624cdd3540ac14bd5e38cb835eb826be28e88d029a4208be48b2d48673a92c0f6d6f47cdf2c15fecfe9f61fb5bc1bbd5cdd16793a3accae45bf5859c2390a2f7ad707abce60971c3031e2c95f51c5ec3e89a57b7e55d9322abed5e0713aee0564f6d25c99cfef30134750fc5c0beebfba52d5ce81eea9df872d3fe57cb8516808e6f7c39e55368b1cc10cc95e322541dbb0bd9d9fed639d94555e0aa1499b9821c2c8057729eafc09a27bd20c53892776ae57c2a01cc17d886f6dabd911ec02f98075acf9d1d2ee2424ba4464747fc6b1bf972985694890b9fd76ead702ffedbe915ad16deae7f1d9ad1487aef4ca24d73cf350241059600aa0e0826ce4deab30a", "a3ebaab70b77810ba4bd809c79f9970c8c23fc3850f155a324d822590b0746a4b8aa2efca1a63786df35843a20a045bea57f931522d3c608cdcb88cdedef49b50479f0bb670cedb51711af2cd182ea58974994305d0d3fa3748dcb10968252cb89b90d9940274e83711bcf13c9b37e375967bbcf4dd14f8a53743e1b002e5510fa4e195d5f970dbd71a0ee7867cc86b91dcf7b81514824cd49c9234c2cde7c3e57aa6693b7c7e4ec5a41a536c554462b0c697515fe4a65a85953bd184a1a431a71a51b496909ccfb1ff404b4e669ba5370967c7c01bc61ddd4083ab3edbe1f81144fc877398db12669a85efe6fd8ad7454aeb052b0b1e0ca5a1f4bb8a67a08f8ae6b4d4a04a902e7a158d358f71b619244154f94045cc731dc7ba03a38a5916042b097711916ea0fab6878369784b79a0bd75548366498fde5d2cd669b2989f10892590ecea8008ab2136417e148bc22040b8cb51fe948be8455333653fd007001ef2f34f454ecc6e5f4511ec00ef15b1f06924f9998404bc4336ab167e34c1897d79a8ff5ad3ec13136570ebd2cc099", "8919fd8294f111f314390eeca591b722f2527e4c754d92acec7b088bc622c1db00e2331a5657a6bb6c1f976bf72ea84e8d4fbfec8f1afa6c6b20d0597b1c2bb69a5a0595c5cad2eb7c5936e38d50f8bd28692ef088c5361ef65f74b82b5f1b909004a1ab09b5d1eefb4dfddc71c061747a3bb04653dbf6224e4f5223356e7714559f26532512dd86858930f7bb96dcc6130607de8b215175d2d93456d2917b8096d60109db0a5b8819b4868bab8ab2f6280be9459d96027a9539d160ff7ebebfae5bfc9a9948a21f62ab698be90707ba7262a7fb79a4d78bd45a34b8398cd966efc81c474ea7e31c795027d0960a31735350260d94b44880e06235dffa239cfad792ed04a95c13254709a2f60a76820e6d410315353dfeb19f38b451168b314b93330e51854413b6582fabea60bf42362677c410352b6af39c769f4312ebaf0b7498a7b7854d18954ba5f9ada52c9b450d4d763febc1d90bfbea95317531faf2598a4f5e79846ea5a609d33fe15689a9", "9350e5ba26dceb4374a00cc5bdc22faa0d3515ceccc1a5d8c32865eae1b43c34fb52f12b98e30c055474835e95732bb791304deeafbfdc32be7b95bb76208296942b0ca76b37f0b0ff62b8a42212757c3d08e66dee7ac2cd5ced6a1e7fe11a7bb09218cd4d8cd4ad7de9d0258f8f9c86731a51acc8d494a0f85fd15e611d157800ae64781a1c2f11039490a7ab076313511c272f4491e91a5d293f681e6ee6159753d3b21bea6babc91976249656103f4f4cb0fb6cbfc629f61d490266ec4b9cd290f99f735c43ecb2045b678a7a6f384c2b285bf2c29b0cf4465770c6bd29f1267e4944b68044e7f0fbb38db73a130456ac48bc67b249f6aba85a2548c47220c78fff88fb84f9394d7e01c0e55cf1d7272d622e41715bbed4136e0ca14a8b83017428d5118cdcffddcce4a2b0d7c7884ba0e5596cb3226bebe1574a5aa9d42775565199c26c53256e83ec1136600909"],
        ["87cd3fe78068af2f46457eadcd99594298a082dc3759cd5bb9ce7049fbb40b830175521691501bc6a49ccedda539fa03970066012baabe213d7de4b97c32a36e7afa4bb7f21da48c681d7ae6157790bce669f944595daa91ce968e152ef21dfbb044dc5ab2a7c7775fd87bbca64c467c30b4802354a9aa68cf17584c61715a55353c5d5838f8083df5febd415faca01967e40810d1347df55d94ea0ce8eb4a082509fc011a29ccb4eb0a954dd6f12c582996782823d41f7885211f407978381808daa623f42ad1533f8fa51f7153f1dd6fcfbca7a6924fa7b1852fbb5dfc49a2220710bfd38da0af010541f92c75db8b63551cd4795569d66f9b40d341b68e8dfa590a00d4110a719debd4c3ecbcd58643d69413e1e8d80ed63cd8674899eb7ae627c57bcbd4566803fad02e571ee4862f1d229d0f81aac5961a6b41e30ee4f2535992c836623320a7e5182199d488431d1134261bd7c936905bf5d22fc079084f1fe239e8063b5421c7d589081cebae1a76aa51cfce166a6f1b5d0fe6cb561cc0db50ddd244feb4e109c7aa42b0e31d40c231b802b4ca9645a149fee04ebfc40cf828bdcc100dfac65c79a96e1b87b03ef3776c2d6e89fe4e8ceeeb9b0091ad1762a692001959ba442bb3d26c8d055912afbab2cefa7a5cb28740b6afec91408391e1780e69c05c1edfea5a868252e2", "a1a6588dea7e0de230673b61e7145e2a562cf93fcbd2cc0f802ebd8215156db7c82e2dac0b0f84cbfe875ee5a8b40342904a0a4a0626e30453a7f316e0c5b344bcae1fc7431ae216ef544241d31c1963e074b89a903eb43a645ae8e21e780e37adec1ec1d4e70e320c640d896d46a9b655c0a8810afdc4b481a1c6d10e4a416225071a667c1fa3422e88f5a4bde1767a6ca93c0a9596223642b73bde00e0ce6db9149a0f0b75bb5cf5dd165d66c1c0fb284ccbeeea24ffa0ec0703080aaf27e1bdfd3a43dfc87cd8b3026ac50863c0cb2fafb7d5375ae1d8d12603fada305aade41e0ca1057008da83e1f22cbd952c1f0e1cefb1914253a33cc2cfa1df0a78831718da4e1fd4177313f3c1d661eb6f560339a47095752eadedd69e7a363532076d3e28ab4ae54607a58e14dd80d4a24c4574a9924da7ab47296e9081baaacbe3a165441464ac2e2bf963c396c58514265726b1ba9b5eb0b780ff45992d2210ff932af4d8da48d876dc72fd115139d3b548452e7b241462cef26adb1b370cec6e078149d98d06866c0602f32d4b40f2ae3b98128505b3ba6f2ccf66790115dd6d5dc22e7b9165d4139215138a7473dfdf399142dc5d73db22f3a6e300b6ef0654c2eb9e6866c974cea85e96ea4be9d775", "a07245b3d72110a7c7b5cf46f661b30c1910977bd0b4e60fbf8eb12f9cf2d591e281c667bdb7d69a27605f780cf3db3ab22450a9699a5854b686646f79ddcf6b0dd9efa22c09a79d120d5d1cfa832eb39b29a10bf7d8a347477efe924d1fe02782ab4f7dc67e84f8cd228d0a8342481fbe700aacf77b35cdab1b2fbc598e32c42ba6264063e3c9098b2c1b2865cc31df4a793db0d4c9e23a52c538566719c412ffe615bd9961c49bf5f1c348f1045b0570096eb9c0ec58bcf4a1c92b4c781301df559bc6e0f0cdb03ea91776f3590e81723b0774d35be5d7a99c2107e494b151ed76c79c12a17337b778d416fa03029b739303431236d0ba870fddb8207374bd4eebd93ae66538632707e15a7cb8c0795ac320656be304eb77624e4cc98f4c98895540927a9c92989b5c75c2a49abe7b283baf8a61e31e58a02c288cfc1c8252fc7ce79eda2603bb1d11fd0e77f5f7d54605d224802d0f3134863c1a18df79d8e6875a0b88a15c04d56b578ef087cd4045361607d1b95cd6edca9883b0a0f945f8c7cb16b327a1062652fda31af3415512a10f3391ff527da8854fc2f69b3e055f04ec060c37252847a1745c08a907b1", "b5d21edde2abc7fb5fae7dcb55739e63a9ef574b82487dbb48418f2fdd3792af5a26b38c1a8412a8da88f7e9e89615e3b9c1d439a90f84e48fe3cc2ffbc1e13e43132c0c7fdca4a794dd7d5f94476f71109a43b1da58eeb27d1cdcc585ec0af68853c9bba921ffc2d24233e16b038cc4648ae21906595bea0e8b60dc095cd557274c223a719a5e183e83bf70b11d5b1154ecd0cad2351f7bb8c0c31dd34d76288a15e1cb0ccc1edbf709e4db2c1c79f2023dac46fee0d01401c9fbb2ac4df7542231284323e9001bc0bd4c8b9a1278f117cb64031a145241ec388b717ae1eae7979f50f80c436970bcefed35a465bf1b67b0bad36e9890a9f940972af0723d61803c40ca82ff53fc4a76f58e714d886442a379d1015ff6c2539aa55d19139766fbddfda1027ca85fc3753c50c5a2c226610efe5622e8527019c5caf6cefd8074e4d82e542ed0aa54167562b733128b454f1652a63d5c4a9e52f6599c4193b4f0a51f0133535241bfa03d2c5e9a3d80a042f02ba1bb3e156889aaf875c33b08c83f7721da44ff8cc74ae1178adc4e555e", "a78efb76e4cca59d0fa110f44bad0e326636a207e818e1528355aecc009f6bac24a71bf4272194d9dac149fece1217a691869d4e2767906c7585d07dcee95dffb7de1f65f9fe5e67f0301c34363977e33efa2430e14fec2ae897f1fa48e451c19529b61484df9281097eb0fd52006171ac6c8f5366177287668d18f0e098d3ded448dbbe840131ee8b88a354eb8d7c476637259079aa24516ca9a7452e21ef55fc9a8cb60074795f71a7b2c0ab524ded01efc9deed30b1b7a87167218626e5f774366c8f2d05f73a5eae8c9f9764d07e27e9d6bbb878bdefe154699da8a76ca1dc210b6b1b05b95f6a74c10cc18c19f25b7ad11c627c4c86e5c62436c63862e54b8e063fc4432e326b978f172e9f9d68037192ce8eae3f6835eac1d181d50625f52dfa917efcb25f38e820031ba165b836429459e0c9308da3faea9d121c6b8c927088c0c5ef7fb217caf572826b823b5f7614fe7b352d969b89222816e855287c9225a40a63dbb2635436300da3a5de", "8b46e2dccf74d75178bc5f66a52c849025be7b08a5680b206b72de7807ec129a03f897ae1d112d0d8b6555930e69f9aea5664bc1639a5187823023b6026a884b37ea7efb2a9daba22accbe1b29fbc6f9dfbb96d5ce10a406d0419280f26d35d3b91bd1c82141cb5acb4d6c87e4d7c0adc261c7084adf75d11d661c2dd590a88508526f0b32f055a29a61f044f1a0ff7272f56d3b0d2d21c4943a8bba9704b226f5118f038de5d95e38497d664b6c80a215ca9789af0e3444b4e80a36e4f73cc01ae7c39dcee0b73790465b16cada482e370157476bd43b9c2940f3bc2e91ee8f9b697ba3bb8b3b9649ee6547e4cbdbf33dded599e7e34fc48bca5eb7bc09c86e31f98879506d073859a0675d5322d1c62dbc2b124d61c3109164aa5b02e2ad7dd6fcff62b967f674974da9e8a1e8d996355cbb60def83215832ca4fbf0ffadf15c6b0894be1730cfe79c51edc69dcc1f"],
        ["a214b86f60767f8b71a9c0f4c9370d11947f930fe5d6068e2ea70614c45e21141123a7586046b0ba3ad6f712d02537989289d4d88474e743348bdb92de5d3061f5a7c42c3af784b942251c2ab02612e28f5511af84d57e239c3fab8fb5d03e18983171bbbcab0cb4c9f6eb87019a106e2cf30f1e85b0e6c11f9e8f9bccb75c1f78c708895e012651fa834e39fb37d42441c4a249e7d3367ca60e2eb6e28e3e2df3186c94dbe7225d714f1a461183b5fe2146fb22dd152c5a660d6a66fae239494303e495444e4fbda9e5784c31432cc23100533268f8f216bdcaf0dca6ed7fa45009b599c48fc47cb0173b13adba94302c2abebc50b06ee188c2dc5ce618f6958490470362560f4941801db0a64d780f4ad7850880f6030abbf837e2dab559b5dea1d7410012094ba1b39afe3b152f42069c65ac2645d0520836167dfc5e2f787e66b8bdd761d42b3edfd77dba2bb6586971fe561dba02bc6072f585bf758fb54dee700d3292a8eae7312fe5b903b7380950c9da4760d87be0544b1d2f46d8c8e7d1a28bc3237e4c2e4aa1e21c69f0ea52bef26b286eb5a1d77848f01a89d62e9a9daca4500c6a5b0b333bcf71eede076548dba36228948780d5701719ef961d05158476ca621dd73ca0a28f76f74cc07073c437777c70eaecbe33f3012c1c9c995dd232a435fe6b81bf0d36abdd49ac", "99ca1ba1b951d1db47ddf6cc49112151af55d60148b8cff7ab291f9492a429b80d1744f7a87d3fa5ecfb7550a14e55c3a827b028e73bbb6bc5d3a466ee91ab0f10e8c26c3371b47b89c040b84c0965529f9759500c4e53afbb83cd6bc307d7528f3980c3d681f0f938e1ce1c81d8451d9d2e90fe8bc570ebc086dd1dc28215b9e7734d62f00b185874c5c10b8119827072f438c255d2eec2411b8c94ab958d9226b2584a2ffe2981c61f53c9c0197268448226053eb34dbca458cc36960d56a7c64b151a3ea8443c81709a6c19e893243f2ee48e7e4998f2e4b335ae55fb6c2b831906518a4b5fea5cae86c35d3307755ea0881af26e245e645fdc79398fb24349111ce709c1fbe8343958a7ebb2ba3045d2228278edddc6b90b96b91a7bcdfdfd63aff7d81dc29efa79d6785e5c02c83724ee7be45c1210b157ee594f9680a1553d213e60ee84e7b10872aba12aa58961e4eb2da89a82aa1864b7e25896714116b11351fa7c56f4197256c4a82d19b310347262ddb7da9ddca20665505b89a16ea280453fe27b9a000ae3b442659a02020ab79c7821c93d790c314ad92e5a09a35934f82c1949addcae5f27f3843c496f0fc754ba951cd87867fd150c239d559ff63d4a555006451ea7d2ffaeec2f00", "84555d80ca637b932f6cbde1cd591d98c69f1be5bc5cbec0dea16db84aae5c0d5d68e2590d6b2c801994f955fcc2c5ee8ee573eb9b89ebb695af34bf6bb8379b702f629c99a2576b2d921fc6eb975f42497f04310b1f923a32b2534217333412aac7b63683c26b964eb5d29861b6e3dc147f4071f5b4c545fd6c94f5bc6bd96576caf595ba46a476025a131ec783125822a6fc906e3abde0e491f1200c60c5ab604c95704ee80c89697c9fd389ca6090580ce028b6e1ba26d2383a2c73e1ce1ec6aa0b7840285ad5f7f6ac2799eecbb3340bfa419e5eaed415db1847067aec159db72a1ee46872020e69bd4f32f777ec5413e6ab7d782a08836383695788cef5a8b08ad7c8d946c5211c590f75bc55170b4fb1c06edc3cae0b7fb589bf6d9a96bccd180fa1082f6d9ffe529347bb0c474cdecf5ec02b41101c90097b9801309c0475befa8885bad4a4440ecc4f636ce04ae867b2d44094845172f6df7c2ec2712b16a413f0e7edbd403bf7a4ec81820e42dec411b881dc5c4f528e2942c7cf700c4c9269ba8ab66caf4fc8e228e52c5b04d7f1f5b1907db47aec0a2f5a3ddde911e0951461f8e56ff7931be5a078f397", "a48572767104b061e727c6a9a6a73d6624d4fafb79f9792b2ca486df0fb73d10fb92469e2d2da4b344c5434418d9fe50b333b90834781e92604a6be3fdfc24baeab213c7222c69f13f5cd5248abe49f3e6c1efd0b7413ede1e99048e6f3ca19a965853248b742f931eda3f541ae35f543745655bafaa635ca81792b8fbfb4d3e76411141777b6665638a014b86baf9e4483a2b66315b18edeaf6703aa696a2f6a3f82bf1b30a2f9ababc5eae38f673f11b666e0293b9d8ae4982c0f2b5a29474de0c23c45ce63084ef1e0f0b1045dc3a4569ed1749409ceeac4a2aa682ff55f31d3d753b8d9be11e94c6abb75aded2de25f056a3f8ee02622d2ec262a8ebeb14f8d7d392753de743f6469f99e7450e1c1c8b64bb7e8dc7b2f2acdf4fd106047833d0bcc6bd1ba09f69df7ccb215ca5594a02ec10a521c024b09a33fe8d7a1bd105caa67fa06fe3fb10e740325f01b3eb563e48aba86dfc4821479eb7a3827db50edd274bbbf0eaacce1ccd58b53af48d3942c298e2064bd6fea6a110d34cbb606725202b7e60c1abc5fb9a344d0d959e", "8b06c4600963e9355a8293bba4085e923fc835d02e387db9147038a2f6bed2992d5f71563a8d544fd44bc7dc92906a69a11fc7c766a555668d98b6f773e1dd60242347650873ad175ee065f4cdbe2ff136d263c402a6d0b452be86d0aebcbd1094a4c3722a26a1ebe5ed3741e4b46e89745bccb51228f2c51ae0b5debde0c7f569480ff11b7cef9ce82d3e701ce10e6717b8643c65c8f381fe69abf6bb7930a614b405e0d0ecd168f977643f9b8a89a22973249c9b881600e8fe0c5a8af48998abda8f029e9276d370edaa40b478641220d96f0d8333766c21e93a60f8dea89e25d54708ac0aff5bd93130a5cec55d8e6a7e6b1d365436d661eb29467f023d0540ac1a2f7efbdc3fc9a61911e81d727a6ecc96919294105bd484e6bddea7e2cde65be2c4ea68d5a5b379b951f1bd717d330080eda7bad7e7df351fa2ca6d7a78bb3eafe9ce502986cf8c058132b15e0f37a359d0cb8cebf7a82562c7c674c31834e59e56cde64e9a13f18e5cc86c047e", "aa5575f01d3b1244e5b658929d8434d687c19d24d83e80827d471bc4caae9b101fe429b7ae14145e03be96d918c9a030b534838f67eed2b405ff74230e7e342b7708037096b2c023fedce96eb19e2b1ef4aa684fbe3506a40d7199c024abd527ad80ab54fb7cbb2165f9f0a8c5befacfb7d86c26d7082c13985b561c39a8ff7b5e8d69160ee5aa638d7f06a83ed38124242f95a8d0701853e6d2179808a4578fdb7f8e19978ca56e2d6587d687cc25cf6d3a9268d88354596b02e2806c5c0172767a7233443ff0dd9cceefa4e691e17819152014bc87e86f1debd3e870bb378f6292e3f098b05e532f653651aec41cce55d46d94337f52aa78efb83fec4a2859a851cc6dfedb39c0a94f612c62bcd1332061bae669b80e0784d15e0ad9ad82b6836afab2f1aa8636a338f00d02cf03c73c8b2391600fae399ca0eb99d293053ce9ef63b43e71b2059207ec22673a0ecc"],
        ["af7630a2783799e36ae94892e91bb7d6a9881b11930e104b94980af2755b60373d1c6c27d94e91de96c83e93d9747e089239c350520e66c593a840936f0b906b9be435baaa3020f35258d08d0085b7744ea467fb930f7247ac72da4738511ddd807659f1272e4df41d11939bb4c0368810328f15e1cf847ad5abbde911ba6a41ae6b04cbfc93a0c34bb56f9ea66d4a0b5f708d142af2b78b95d112a8535ad67c062b24a687601fcaee3db65481757537586a2e0e12bd65c9f16adf37eb12a9b02c7fc2f11fe25bdaa7a36bcf6b9c01ba5a2eb579e2a8c89f795e121b20d3d0fd344985f2cc417c13bf55c8717de5afb26eec672fa7759957b1c23c14f9586fb392cfbb3aeee4e5bf42d86be02d7173c8117bc15af16bb9f311bd2be6c054edc4979b102869a633f70da3a96ed8583ba124829048420ce0d6fad593e794e7ccac727b4f8d14ce9cee959cd5c705e4fddf228334d7d6b816f18b8d0d4c83d5aef5c0869f667b22636afe697c9500319fba1c524d07751b6279329669d107b198584a4eff5304223c8b292c97c32d11024b6817323b980ffadd7f4cb6928142d1bc076734bc362cff49d416d5b5d59fb09f60d1b69161f58498651092ec8c558e594e3f04a93048da57f6c0f04ae25ad76a6a28bd82fc25face5eb181c635ce8343e61bf95623194f85cec2f919b0dc930d", "a64b68efa252353e2084f23292d99fabcc4eb8bab98485dd95903988545d6d2dab1228ae5f0cac00c0d7e9e7b787e23f8a6da34abaddabd21a8321cb59d8f96271d7b93698e989a4d8185bb7402d568fbcee4c637ad7fa7ceae00f1084012a538a7b60a5a6c2281ceb20acc0878bdde8273d191f30f5ecf6722de2eff95f392fee91ca0dcb56f2bd4bc47ff4abc91f5d127c84a3d176b05909fcb5d91a9cb3a28f2df610a98412935aff4cf8ca3e676c72a5d0441cda1ef6f54f44e4aaf6558fbdc22477c635237700e77f810c4b29a74e2edb0028ff001506d4dde06b91c832c1f9d6108662a594229ca21605acbed567a2671f113bd24edefdc2192a844998f6460ccd8d0b43f521e728edbc1b5e2e728b342f50da171563ce9f92c189dcf6c08872a375aa32d6b43d8c21a2db2bc5411527dbdb8b1cf63fcb5f415378ceec52610e9e067649c311a52af9ba4bf54c473f3d909c87931986d26977afedc123ee87440d6e4c0786c4e720ff231b3db7658be2358215719479ef884aa59672d529a40f35798485caa7d511ec6a7750462e0fe7f2be337b30d0d92575e6761a0712d61d98c9864ad5fceb38c5fc3d8e554ed03b2e0277407473b57b119d2dce4b66b1309da18ce17e13c836783473aaa9", "b22142c4e3b777b00be837ce61355b8707b6ecaff3884c1b835d528389a646aa188a210ee9ad74d899801dd7cf2daaaab853c4d505954c09c1574b5ee60a0b029a36d03d1f1dda99b874d9856cbce69c75155a6b07eb50df856c58eb2383d14bb513b71c9d3b3a9f89fe6792e5d0836d601b746d5f0b8fc3c49545a795bd61c9b59c34ba7c40c2849cb2b8fccdadb85b56a49d652b26c6efac2dc1ddd356eb04a174a3abb6c267071be74c3bee2ef01364c4b8ff3c46ff5e9c07478da7801b72c4e1695f007c9258ed693d9aa07d8db502325985ea92483cce1b55fc3ba4b2e9feebabbe89af8c68665d7449491e61281284c346237e2117bc87e6ad9808f7366802c4da15e5b4e8b6f53ef9b7dc4d1a6e4eb706783429bb6b7f0f536c6f109382e63f566271ffa593c888c7a0d0d1ab6ff4d54dd0aeba10c1c71710c6bc8e27a4984a6c70d4ddc8b20573fc68c4eb961a9b81cbce964c246d510a04137345ca9f1fcd5c5092bbd6e45e260e1157b001488e69648337e8dc86b938eeb62583a0ffa518a54cd1d724ad021d6b01fbf63f359c669eece0bcc4895aaa56c9163dab5d91f905668a5982f97240447ff2c9d7", "a2b0399ccdae4b29d9f3493da07c24a5d7b590445de164590dc163ef69f716d330b524e370d71fe14de00a98767b566babcbfda1079ffc9753580beb87b8e23e5fe36282b6615c558b5177004bedabc3abe2dbe1b81dc1209ae50ccfbb3fa1d8825b03eff067862b7c688d58da436c5334fb1a6b920d653c5abd9a71561873090c003d4d4e0106863db107ef7ab3304c19ebbb26beafc3555613f52262d96f02b3cb95f0abca513b5bdcb2876d8741353ee9aa074836cbd0b520fe40abd3dda7854b249c0737e33671dd4d8ace1cc2271908e4181fc2b72541e06f31ed1f7cad6a9b245686e7ee2cbf7d2a43d6239c943959910cf749d06e30533488ff23a7b1817a9ea7d401daa99053175f3fd5a96522c1bb9e89b1bf65e4e2f6d4076d002e80894f0d56759d7d04a30ba36acd671f44091ce3aded35d2c02aa2d16813c09a8d8758786b2b8fc63e6f415a12b8ac93162ca79c3abf06a1121edf0017a76d68aff69efcf19613fcdfdf4db79fd8d0a5155bc06cb2753406070f6ec6157255be616ab76379e40d8732fa49da9be76213", "ad12c6a2082d02e9cff3dd9c08997f7f9eb93803a92cad82366c7e110961ae78050706e2cdd4870b09815c16e550ea518ee231b7d202efe46a295f03ca39301f2bf1c32727151b9dd892f7f6a8b8f74118af2503f9068116ce0e5baa0a06eba4a4b8ba47ce45143342c2d7245680b6276b3d74908f80d4dc9fa21734e592bddab8872338fb7c7f092fbe0a13f606ba66444c1bfcccf9da22b46438f0c7c0c4ec1c7bd8909bf6202846e0e7c5199d926f1099367acbd6256cecf553ad1f431a36c6df727fb2d991b8cba4edcce1f6df854d3e2525fc5a2830292aa4ea6756a442dd24e210e30cfbd41322b4f81312835466194b4ad727639de5b246fee13d20ab68a4b2b5f72f06a8c13e6798bc5f7a5f1685490544cf749c72dca026162cb1614920c19b1548f19aa558331015facb17387fa50c0de421b07003bbc731a14c8f973a83d0862e209598dd73ada3a2c8616e55f11c67ada4402be7cc18f6abcb999ad2af50ca68d2bb1999fd71d497fbfc", "806b9467c84a9dfca0cf1346d006f45f402e127aef815c6ff53c214401cc9fc698e2e61e51ea5e1ef2c57bbad71b7f1ea0686e15b2635aec6caf80ed4cff6a06a8318616d486624c465603182a1365049fafd776f9eec83e00378b10acf172eea30546066a98a7d1fb77793791413f69f0946fc18c258245e6ec21ce6ae11da23fa9d210b91c9d0a75d4467f88298a8c34841eff207a0194bc31c74dc3355040c8ea56cae3975afe98f7d270af43a0e3336947840b60b314efe0eed9d67b3aa5f187468c51db9cb41ee408a18e01e8be44525157b964e17a97ab6b44de1a319c554f22e0ef9a544cae94822d35968e3f3e64a4962662b2c1f8a058d332f398b930442cf0d5a93a6d5df8ccaa668c388228367ca797392350a8547790dd945cc72cb1a7221ca461215255f172f663c9882db12f3e021d057d4dce9f9baca98a3a52386c87b9f01c030749c605b42ebdc1"]
    ];

    for i in 0..TEST_KEY_INFOS.len() {
        let pk = PublicKey::from(
            &SecretKey::new(TEST_KEY_GEN_IKM.as_ref(), Some(TEST_KEY_INFOS[i]))
                .expect("secret key generation failed"),
        );

        // start with all hidden messages
        let mut proof_msgs: Vec<ProofMessage> =
            messages.iter().map(|a| ProofMessage::Hidden(*a)).collect();

        let signature = Signature::from_octets(
            &<[u8; Signature::SIZE_BYTES]>::try_from(
                hex::decode(EXPECTED_SIGNATURES[i])
                    .expect("hex decoding failed"),
            )
            .expect("data conversion failed"),
        )
        .expect("signature deserialization failed");
        assert_eq!(
            signature
                .verify::<_, _, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    &generators,
                    &messages
                )
                .unwrap(),
            true
        );

        let mut proof_values: Vec<String> = Vec::new();

        // Reveal 1 message at a time
        for j in 0..proof_msgs.len() {
            let proof = Proof::new_with_rng::<
                _,
                _,
                Bls12381Shake256CipherSuiteParameter,
            >(
                &pk,
                &signature,
                header,
                ph,
                &generators,
                proof_msgs.as_slice(),
                &mut rng,
            )
            .expect("proof generation failed");

            let expected_proof = hex::decode(expected_proofs[i][j]).expect(
                "expected
             proof test data decoding failed",
            );
            assert_eq!(proof.to_octets(), expected_proof);
            proof_values.push(hex::encode(proof.to_octets()));
            let mut revealed_msgs = BTreeMap::new();
            for k in 0..j {
                revealed_msgs.insert(k, proof_msgs[k].get_message());
            }

            assert_eq!(
                proof
                    .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                        &pk,
                        header,
                        ph,
                        &generators,
                        &revealed_msgs
                    )
                    .expect("proof verification failed"),
                true
            );
            proof_msgs[j] = ProofMessage::Revealed(messages[j]);
        }
        // println!("{:?},", proof_values);
    }
}

// Test generated proof uniqueness although every proof-gen API call uses Rng.
#[test]
fn proof_uniqueness() {
    for (
        (pk1, sig1, h1, ph1, gen1, msg1, revealed_indices1),
        (pk2, sig2, h2, ph2, gen2, msg2, revealed_indices2),
        failure_debug_message,
    ) in test_data_proof_uniqueness()
    {
        let (proof1, _) = test_helper::proof_gen(
            &pk1,
            &sig1,
            h1,
            ph1,
            &gen1,
            &msg1,
            &revealed_indices1,
            &mut OsRng,
            failure_debug_message,
        );
        let (proof2, _) = test_helper::proof_gen(
            &pk2,
            &sig2,
            h2,
            ph2,
            &gen2,
            &msg2,
            &revealed_indices2,
            &mut OsRng,
            failure_debug_message,
        );

        assert_ne!(
            proof1, proof2,
            "proofs should not be equal - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::new_with_rng(...)` implementation by passing valid paramter
// values.
fn proof_gen_verify_valid_cases() {
    for ((key_pair, header, ph, generators, messages), failure_debug_message) in
        test_data_proof_gen_verify_valid_cases()
    {
        // Signature to be used in proof_gen
        let signature =
            Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.secret_key,
                &key_pair.public_key,
                header,
                &generators,
                messages.clone(),
            )
            .expect("signing failed");

        // Proof gen-verify all hidden messages
        let indices_all_hidden = BTreeSet::<usize>::new();
        let (proof, revealed_messages) = test_helper::proof_gen(
            &key_pair.public_key,
            &signature,
            header,
            ph,
            &generators,
            &messages,
            &indices_all_hidden,
            &mut OsRng,
            failure_debug_message,
        );
        assert_eq!(
            proof
                .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                    &key_pair.public_key,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof verification failed - {failure_debug_message}"
                )),
            true
        );

        for i in 0..messages.len() {
            let revealed_indices = (0..i)
                .collect::<Vec<usize>>()
                .iter()
                .cloned()
                .collect::<BTreeSet<usize>>();
            let (proof, revealed_messages) = test_helper::proof_gen(
                &key_pair.public_key,
                &signature,
                header,
                ph,
                &generators,
                &messages,
                &revealed_indices,
                &mut OsRng,
                failure_debug_message,
            );
            assert_eq!(
                proof
                    .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                        &key_pair.public_key,
                        header,
                        ph,
                        &generators,
                        &revealed_messages
                    )
                    .expect(&format!(
                        "proof verification failed - {failure_debug_message}, \
                         revealed indices {revealed_indices:#?}"
                    )),
                true
            );
        }
    }
}

#[test]
// Test proof-verification case with
//    all revealed messages proof value and
//    a `revealed_messages` value where all revealed messages are the original
// messages but those may not be at their original indices
fn proof_gen_verify_all_revealed_shuffled_indices() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());

    // Signature to be used in proof_gen
    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof gen-verify all revealed messages
    let indices_all_revealed = (0..NUM_MESSAGES)
        .collect::<Vec<usize>>()
        .iter()
        .cloned()
        .collect::<BTreeSet<usize>>();
    let (proof_all_revealed_messages, _) = test_helper::proof_gen(
        &key_pair.public_key,
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_revealed,
        &mut OsRng,
        "proof generation failed",
    );

    // Make a `revealed_messages` value where all revealed messages are the
    // original messages but those may not be at their original indices
    let mut shuffled_messages = messages.clone();
    shuffled_messages.shuffle(&mut thread_rng());

    let revealed_messages_same_but_shuffled_indices = shuffled_messages
        .iter()
        .enumerate()
        .map(|(i, &m)| (i, m))
        .collect::<BTreeMap<usize, Message>>();

    assert_eq!(
        proof_all_revealed_messages
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages_same_but_shuffled_indices
            )
            .expect("proof-verification should not fail"),
        true
    );
}

#[test]
// `Proof` can be generated with invalid public key but proof verification
// should fail for such proofs.
fn proof_gen_with_invalid_public_key() {
    const NUM_MESSAGES: usize = 5;
    let key_pair = get_random_test_key_pair();
    let header = Some(TEST_HEADER.as_ref());
    let ph = Some(TEST_PRESENTATION_HEADER_1.as_ref());
    let messages = get_random_test_messages(NUM_MESSAGES);
    let generators = create_generators_helper(messages.len());
    let indices_all_hidden = BTreeSet::<usize>::new();
    let signature =
        Signature::new::<_, _, Bls12381Shake256CipherSuiteParameter>(
            &key_pair.secret_key,
            &key_pair.public_key,
            header,
            &generators,
            messages.clone(),
        )
        .expect("signing failed");

    // Proof is generated by passing invalid PublicKey which is identity element
    let (proof, revealed_messages) = test_helper::proof_gen(
        &PublicKey::default(),
        &signature,
        header,
        ph,
        &generators,
        &messages,
        &indices_all_hidden,
        &mut OsRng,
        "proof generation failed",
    );

    // Proof verification fails with original PublicKey which was used during
    // signing
    assert_eq!(
        proof
            .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &key_pair.public_key,
                header,
                ph,
                &generators,
                &revealed_messages
            )
            .expect(&format!("proof verification failed ")),
        false
    );

    // Proof verification also fails if same(or any) invalid PublicKey is
    // provided
    assert_eq!(
        proof.verify::<_, Bls12381Shake256CipherSuiteParameter>(
            &PublicKey::default(),
            header,
            ph,
            &generators,
            &revealed_messages
        ),
        Err(Error::InvalidPublicKey)
    );
}

#[test]
// Test `Proof::new_with_rng(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_gen_invalid_parameters() {
    for (
        (pk, signature, header, ph, generators, messages, revealed_indices),
        error,
        failure_debug_message,
    ) in test_data_proof_gen_invalid_parameters()
    {
        let (proof_messages, _) = test_helper::to_proof_revealed_messages(
            &messages,
            &revealed_indices,
        );

        let result = Proof::new::<_, Bls12381Shake256CipherSuiteParameter>(
            &pk,
            &signature,
            header,
            ph,
            &generators,
            proof_messages.as_slice(),
        );
        assert_eq!(
            result,
            Err(error),
            "proof-generation should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// Test `Proof::verify(...)` implementation's returned errors by passing
// invalid paramter values.
fn proof_verify_invalid_parameters() {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        error,
        failure_debug_message,
    ) in test_data_proof_verify_invalid_parameters()
    {
        assert_eq!(
            proof.verify::<_, Bls12381Shake256CipherSuiteParameter>(
                &pk,
                header,
                ph,
                &generators,
                &revealed_messages
            ),
            Err(error),
            "proof-verification should return error - {}",
            failure_debug_message
        );
    }
}

fn verify_proof_helper<const N: usize>(
    test_data: [(
        (
            Proof,
            PublicKey,
            Option<&'static [u8]>,
            Option<&'static [u8]>,
            Generators,
            BTreeMap<usize, Message>,
        ),
        &'static str,
    ); N],
) {
    for (
        (proof, pk, header, ph, generators, revealed_messages),
        failure_debug_message,
    ) in test_data
    {
        assert_eq!(
            proof
                .verify::<_, Bls12381Shake256CipherSuiteParameter>(
                    &pk,
                    header,
                    ph,
                    &generators,
                    &revealed_messages
                )
                .expect(&format!(
                    "proof-verification should not return error - {}",
                    failure_debug_message
                )),
            false,
            "proof-verification should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
// If we pass paramters which were used originally for proof-generation but use
// a modified proof(by modifying `Proof` struct members) in `Proof::verify`,
// verification should fail, i.e. return `false`.
fn verify_tampered_proof() {
    verify_proof_helper(test_data_verify_tampered_proof());
}

#[test]
// If paramters passed to Proof::verify(...) are valid but not the one which
// were used during proof-generation then proof-verification should fail i.e.
// return `false`.
fn verify_tampered_parameters() {
    verify_proof_helper(test_data_verify_tampered_parameters());
}

#[test]
fn to_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];

    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };
    let proof_octets = proof.to_octets();

    let expected_proof_octets = [
        a_prime.to_affine().to_compressed().as_ref(),
        a_bar.to_affine().to_compressed().as_ref(),
        d.to_affine().to_compressed().as_ref(),
        c.0.to_bytes_be().as_ref(),
        e_hat.0.to_bytes_be().as_ref(),
        r2_hat.0.to_bytes_be().as_ref(),
        r3_hat.0.to_bytes_be().as_ref(),
        s_hat.0.to_bytes_be().as_ref(),
        m_hat_list[0].0.to_bytes_be().as_ref(),
        m_hat_list[1].0.to_bytes_be().as_ref(),
    ]
    .concat();
    assert_eq!(proof_octets, expected_proof_octets);
}

#[test]
fn from_octets_invalid_parameters() {
    for (octets, error, failure_debug_message) in
        test_data_from_octets_invalid_parameters()
    {
        let result = Proof::from_octets(octets);
        assert_eq!(
            result,
            Err(error),
            "`Proof::from_octets` should fail - {}",
            failure_debug_message
        );
    }
}

#[test]
fn to_from_octets() {
    let a_prime = G1Projective::random(&mut OsRng);
    let a_bar = G1Projective::random(&mut OsRng);
    let d = G1Projective::random(&mut OsRng);
    let c = Challenge(Scalar::random(&mut OsRng));
    let e_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r2_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let r3_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let s_hat = FiatShamirProof(Scalar::random(&mut OsRng));
    let m_hat_list = vec![FiatShamirProof(Scalar::random(&mut OsRng)); 2];
    let proof = Proof {
        A_prime: a_prime,
        A_bar: a_bar,
        D: d,
        c,
        e_hat,
        r2_hat,
        r3_hat,
        s_hat,
        m_hat_list: m_hat_list.clone(),
    };

    let proof_octets = proof.to_octets();
    let proof_deserialized = Proof::from_octets(&proof_octets).expect(
        "roundtrip deserialization `Proof::from_octets(...)` should not fail",
    );
    assert_eq!(proof, proof_deserialized);
}
